(
  cases:[
    (
      name:"non-#[repr(C)] struct",
      code:r##"
        #r
        struct Foo{
          x: u32,
          y: u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#r":"" },
          find_all: [regex(r##"repr\(C\).*attribute"##)],
          error_count: 1,
        ),
        (
          replacements: { "#r":"#[repr(align(1))]" },
          find_all: [regex(r##"repr\(C\).*attribute"##)],
          error_count: 1,
        ),
        (
          replacements: { "#r":"#[repr(packed)]" },
          find_all: [regex(r##"repr\(C\).*attribute"##)],
          error_count: 1,
        ),
        ( replacements: { "#r":"#[repr(C)]" }, error_count: 0 ),
      ],
    ),
    (
      name:"non-#[repr(C)] struct",
      code:r##"
        #r
        enum Foo{
          A{x:u32},
        }
      "##,
      subcase: [
        (
          replacements: { "#r":"" },
          find_all: [regex("derive.*enum")],
          error_count: 1,
        ),
        (
          replacements: { "#r":"#[repr(C)]" },
          find_all: [regex("derive.*enum")],
          error_count: 1,
        ),
      ],
    ),
    (
      name:"non-#[repr(C)] struct",
      code:r##"
        #r
        union Foo{
          x: u32,
          y: u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#r":"" },
          find_all: [regex("derive.*union")],
          error_count: 1,
        ),
        (
          replacements: { "#r":"#[repr(C)]" },
          find_all: [regex("derive.*union")],
          error_count: 1,
        ),
      ],
    ),

  ]
)
